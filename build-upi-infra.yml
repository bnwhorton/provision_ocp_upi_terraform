#!/usr/local/bin/ansible-playbook --inventory=inventory
- name: ' Konductor | Provision-upi-infra | Build Infra Resources'
  hosts: localhost
  vars:
    module: "provision-ovirt"
    state_provider: "local"
    tf_module_path: "{{ dir_terraform }}/ovirt"
    ansible_name_module: " Konductor | Build UPI Infra Resources | {{ module }}"
  vars_files:
    - vars/global.yml

  pre_tasks:
    #- name: Ensure the right version of python is installed on host
    #  become: true
    #  yum:
    #    name: python2-jmespath
    #    state: present

  tasks:
    - name: '{{ ansible_name_module }} | find | *-node '
    ####### Find Terraform folders to process 
      find:
        file_type: directory
        patterns:
          - "*-node"
        paths:
          - "{{ tf_module_path }}"
      register: instance_nodes

    - name: '{{ ansible_name_module }} | set_fact | node paths'
      set_fact:
        instance_paths: "{{ instance_nodes.files | map(attribute='path') | list }}"

    ####### Terraform Init
    - name: '{{ ansible_name_module }} | shell | terraform init'
      shell: terraform init 
      args:
        chdir: "{{ tf_module_path }}"
      with_items: 
        - "{{ tf_module_path }}"
        - "{{ instance_paths }}" 

    ####### Terraform Apply
    # Using command or shell module for now due to lack of state-out option with
    # the terraform module
    - name: '{{ ansible_name_module }} | command | terraform | apply'
      #terraform:
      #  project_path: "{{ tf_module_path }}"
      #  variables_file: "{{ item }}/instance.auto.tfvars"
      #  force_init: true
      #  state: present
      #  state_file: "{{ tf_module_path }}/{{ item }}-terraform.state"
      #loop: "{{ instance_paths }}"
      #register: tf_output
      command: > 
        terraform apply \
        -var-file="{{ item }}/instance.auto.tfvars" \
        -auto-approve \
        -state-out="{{ tf_module_path }}/{{ item | basename }}-terraform.state" 
      args:
        chdir: "{{ tf_module_path }}"
      loop: "{{ instance_paths }}"
      ignore_errors: true
      #failed_when:
      #  - tf_apply.changed | bool
      #  - tf_apply.failed | bool
      #  - tf_apply.results[0].rc > 0
      #  - "'Cannot add VM. Related operation is currently in progress' not in tf_apply.results[0].stderr"
      register: tf_apply

    - name: '{{ ansible_name_module }} | command | wait for all vms to be created before running next tasks'
      wait_for:
        timeout: 600
      delegate_to: localhost

    - name: '{{ ansible_name_module }} | command | terraform | init | vm search'
      command: > 
        terraform init 
      args:
        chdir: "{{ item }}-search"
      loop: "{{ instance_paths }}"
      register: tf_init_lookup

    - name: '{{ ansible_name_module }} | command | terraform | apply | vm search'
      command: > 
        terraform apply \
        -var-file="{{ item }}-search/instance-search.auto.tfvars" \
        -auto-approve 
      args:
        chdir: "{{ item }}-search"
      loop: "{{ instance_paths }}"
      ignore_errors: true
      register: tf_apply_lookup

    - name: '{{ ansible_name_module }} | set_fact | Load terraform state files'
      set_fact:
        statefiles: "{{ lookup('file', item + '-search/terraform.tfstate') }}"
      loop: "{{ instance_paths }}"
      register: statefiles_out

    - name: '{{ ansible_name_module }} | set_fact | Retrieve IP and instance name'
      set_fact:
        instance_ips: "{{ statefiles_out | json_query(ipquery) }}"
        instance_names: "{{ statefiles_out | json_query(namequery) }}"
        instances: "{{ statefiles_out | json_query(query) }}"
      vars:
        ipquery: "results[*].ansible_facts.*.resources[][*].instances[][].attributes.* | [][].reported_devices[?name=='eth0'].ips[][?version=='v4'].address[]"
        namequery: "results[*].ansible_facts.*.resources[][*].instances[][].attributes.* | [][].name"
        query: "results[*].ansible_facts.*.resources[][*].instances[][].attributes.* | { name: [][].name, ipaddr: [][].reported_devices[?name=='eth0'].ips[][?version=='v4'].address[]}"
      register: statejdata_out

    - name: '{{ ansible_name_module }} | set_fact | format data for static inventory format'
      set_fact:
        lbs: "{{ dict(instance_names | zip (instance_ips)) }}"
        newinstances: "{{ dict(instance_names | zip (instance_ips)) }}"

    - name: '{{ ansible_name_module }} | template | process new instance static inventory'
      template:
        src: "templates/inventory/instances.j2"
        dest: "{{ inventory_dir }}/instances"
        mode: '755'

    - name: '{{ ansible_name_module }} | add_host | create in memory host group to run subsequent plays'
      add_host:
        name: "{{ item.key }}"
        groups: 
          - "{{ 'new' + (item.key.split('-')[1] | regex_replace('\\d','')) }}"
          - "newinstances"
        ansible_user: "{{ ansible_user }}"
        ansible_sudo_pass: "{{ vm_rootpw }}"
        ansible_become_pass: "{{ vm_rootpw }}"
        ansible_ssh_pass: "{{ vm_rootpw }}"
        instance_name: "{{ item.key }}"
        ansible_host: "{{ item.value }}"
        ansible_connection: 'ssh'
      loop: "{{ newinstances | dict2items }}"
